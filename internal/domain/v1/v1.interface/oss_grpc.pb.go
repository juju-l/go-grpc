// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/vipex.cc/aliOss/v1/v1.proto/oss.proto

package v1_interface

import v1_proto "gitee.com/vipex/go-grpc/api/vipex.cc/aliOss/v1/v1.proto"

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OssGrpcClient is the client API for OssGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OssGrpcClient interface {
	Put(ctx context.Context, in *v1_proto.OssPutReq, opts ...grpc.CallOption) (*v1_proto.OssPutRst, error)
	Get(ctx context.Context, in *v1_proto.OssGetReq, opts ...grpc.CallOption) (*v1_proto.OssResult, error)
}

type ossGrpcClient struct {
	cc *grpc.ClientConn
}

func NewOssGrpcClient(cc *grpc.ClientConn) OssGrpcClient {
	return &ossGrpcClient{cc}
}

func (c *ossGrpcClient) Put(ctx context.Context, in *v1_proto.OssPutReq, opts ...grpc.CallOption) (*v1_proto.OssPutRst, error) {
	out := new(v1_proto.OssPutRst)
	err := c.cc.Invoke(ctx, "/v1.proto.OssGrpc/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ossGrpcClient) Get(ctx context.Context, in *v1_proto.OssGetReq, opts ...grpc.CallOption) (*v1_proto.OssResult, error) {
	out := new(v1_proto.OssResult)
	err := c.cc.Invoke(ctx, "/v1.proto.OssGrpc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OssGrpcServer is the server API for OssGrpc service.
type OssGrpcServer interface {
	Put(context.Context, *v1_proto.OssPutReq) (*v1_proto.OssPutRst, error)
	Get(context.Context, *v1_proto.OssGetReq) (*v1_proto.OssResult, error)
}

func RegisterOssGrpcServer(s *grpc.Server, srv OssGrpcServer) {
	s.RegisterService(&_OssGrpc_serviceDesc, srv)
}

func _OssGrpc_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1_proto.OssPutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssGrpcServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.proto.OssGrpc/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssGrpcServer).Put(ctx, req.(*v1_proto.OssPutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OssGrpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1_proto.OssGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssGrpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.proto.OssGrpc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssGrpcServer).Get(ctx, req.(*v1_proto.OssGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OssGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.proto.OssGrpc",
	HandlerType: (*OssGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _OssGrpc_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _OssGrpc_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/vipex.cc/aliOss/v1/v1.proto/oss.proto",
}

func init() {
	proto.RegisterFile("api/vipex.cc/aliOss/v1/v1.proto/oss.proto", fileDescriptor_oss_19839d7dfafeb6a1)
}

var fileDescriptor_oss_19839d7dfafeb6a1 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xc1, 0x4f, 0xfa, 0x30,
	0x14, 0x66, 0xec, 0x17, 0x60, 0xe5, 0x77, 0x20, 0xf5, 0xe0, 0x42, 0x8c, 0x21, 0x3b, 0xcd, 0x18,
	0xd7, 0x0c, 0x8f, 0x5e, 0x0c, 0x51, 0x39, 0x98, 0x08, 0xe9, 0xd1, 0x8b, 0xd9, 0xea, 0x0b, 0xa9,
	0x8e, 0xb4, 0xb4, 0xdd, 0x94, 0xff, 0xde, 0xac, 0x65, 0x20, 0x70, 0x30, 0x9c, 0xfa, 0xf5, 0xbd,
	0xf7, 0xbd, 0xef, 0x7b, 0xed, 0x43, 0x57, 0x99, 0xe4, 0xa4, 0xe2, 0x12, 0xbe, 0x13, 0xc6, 0x48,
	0x56, 0xf0, 0x99, 0xd6, 0xa4, 0x4a, 0x49, 0x95, 0x26, 0x52, 0x09, 0x23, 0x88, 0xd0, 0xda, 0x21,
	0xdc, 0x6b, 0x62, 0x43, 0xb2, 0x47, 0x92, 0x65, 0x5e, 0x70, 0xb6, 0x47, 0xca, 0x24, 0xa7, 0xa0,
	0xcb, 0xc2, 0xb8, 0x7b, 0xc4, 0x50, 0x30, 0xd3, 0x7a, 0x5e, 0x1a, 0x0a, 0x2b, 0x1c, 0xa2, 0xae,
	0x82, 0xd5, 0x13, 0x2f, 0x20, 0xf4, 0x46, 0x5e, 0xfc, 0x9f, 0x36, 0x57, 0x7c, 0x81, 0x02, 0x91,
	0x7f, 0x00, 0x33, 0xcf, 0xb0, 0x0e, 0xdb, 0x23, 0x2f, 0x0e, 0xe8, 0x2e, 0x80, 0x2f, 0x11, 0xca,
	0x4b, 0xf6, 0x09, 0xe6, 0x25, 0x5b, 0x42, 0xe8, 0xdb, 0xf4, 0xaf, 0x48, 0x74, 0x6d, 0x45, 0xa6,
	0x60, 0x45, 0xf6, 0x8b, 0xbd, 0xa3, 0xe2, 0xf5, 0xd6, 0x91, 0x36, 0x38, 0x46, 0x1d, 0x65, 0xed,
	0xda, 0xc2, 0xfe, 0x78, 0x90, 0x34, 0x93, 0x24, 0x6e, 0x0c, 0xba, 0xc9, 0x63, 0x8c, 0xfe, 0xbd,
	0x67, 0x26, 0xb3, 0xe6, 0x7a, 0xd4, 0x62, 0x9c, 0xa0, 0x1e, 0x28, 0x25, 0xd4, 0x03, 0x68, 0xeb,
	0xaa, 0x3f, 0xc6, 0x3b, 0xfe, 0xe3, 0x26, 0x43, 0xb7, 0x35, 0xd1, 0x97, 0x95, 0x76, 0x8d, 0x4f,
	0x90, 0x1e, 0x20, 0xbf, 0x54, 0x45, 0xd8, 0x1e, 0xf9, 0x71, 0x40, 0x6b, 0x78, 0xb2, 0xf0, 0x39,
	0xf2, 0x67, 0x5a, 0x37, 0x8d, 0xdc, 0x9b, 0xd4, 0x70, 0x2c, 0x50, 0xb7, 0x7e, 0x39, 0x25, 0x19,
	0x4e, 0x91, 0x3f, 0x2f, 0x0d, 0x3e, 0xdb, 0x35, 0xda, 0x7e, 0xdc, 0xf0, 0x38, 0xa8, 0x4d, 0xd4,
	0xaa, 0x29, 0x53, 0x38, 0xa4, 0xb8, 0x6f, 0x38, 0xa0, 0xb8, 0x89, 0xa2, 0xd6, 0x64, 0xf2, 0x7a,
	0xbf, 0xe0, 0x06, 0x20, 0x61, 0x62, 0xe9, 0x16, 0x89, 0x2c, 0xc4, 0xcd, 0x42, 0x49, 0x46, 0xfe,
	0xd8, 0xc7, 0xbb, 0x2a, 0x7d, 0xb3, 0x20, 0xef, 0xd8, 0xe3, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x4e, 0x26, 0x10, 0xba, 0xc2, 0x02, 0x00, 0x00,
}
