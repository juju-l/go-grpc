// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package v1_interface

import v1_proto "gitee.com/vipex/go-grpc/api/vipex.cc/oauth2/v1/v1.proto"

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserGrpcClient is the client API for UserGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserGrpcClient interface {
	Login(ctx context.Context, in *v1_proto.User, opts ...grpc.CallOption) (*v1_proto.BaseResult, error)
}

type userGrpcClient struct {
	cc *grpc.ClientConn
}

func NewUserGrpcClient(cc *grpc.ClientConn) UserGrpcClient {
	return &userGrpcClient{cc}
}

func (c *userGrpcClient) Login(ctx context.Context, in *v1_proto.User, opts ...grpc.CallOption) (*v1_proto.BaseResult, error) {
	out := new(v1_proto.BaseResult)
	err := c.cc.Invoke(ctx, "/v1.proto.UserGrpc/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGrpcServer is the server API for UserGrpc service.
type UserGrpcServer interface {
	Login(context.Context, *v1_proto.User) (*v1_proto.BaseResult, error)
}

func RegisterUserGrpcServer(s *grpc.Server, srv UserGrpcServer) {
	s.RegisterService(&_UserGrpc_serviceDesc, srv)
}

func _UserGrpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1_proto.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.proto.UserGrpc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServer).Login(ctx, req.(*v1_proto.User))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.proto.UserGrpc",
	HandlerType: (*UserGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserGrpc_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_user_8b41b79eb88262f2) }

var fileDescriptor_user_8b41b79eb88262f2 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x4f, 0x41, 0x4b, 0xf5, 0x30,
	0x10, 0xfc, 0xfa, 0xf9, 0x5e, 0xad, 0x2b, 0x88, 0x04, 0x91, 0xe2, 0xe9, 0xd1, 0xd3, 0xbb, 0x98,
	0xd0, 0x7a, 0xf3, 0x81, 0x48, 0x55, 0xbc, 0xe8, 0x25, 0xe0, 0xc5, 0x8b, 0xd4, 0x74, 0xa9, 0x05,
	0x35, 0x61, 0xd3, 0x56, 0xf1, 0xd7, 0x4b, 0xd2, 0xc4, 0x9e, 0x32, 0xb3, 0x3b, 0x33, 0x3b, 0x01,
	0x18, 0x2d, 0x12, 0x37, 0xa4, 0x07, 0xcd, 0xb2, 0xa9, 0x9c, 0x51, 0x71, 0x09, 0xa9, 0x44, 0x3b,
	0xbe, 0x0f, 0x2c, 0x87, 0x7d, 0x24, 0xba, 0xd1, 0x2d, 0xe6, 0xc9, 0x26, 0xd9, 0xae, 0x65, 0xa4,
	0xec, 0x14, 0x52, 0x24, 0x7a, 0xb4, 0x5d, 0xfe, 0x7f, 0x93, 0x6c, 0x0f, 0x64, 0x60, 0xc5, 0x15,
	0x64, 0x77, 0x44, 0x9a, 0x6e, 0xd1, 0x3a, 0xb7, 0xcb, 0x77, 0xa2, 0xc4, 0x8b, 0x22, 0x75, 0x1b,
	0xa5, 0x5b, 0x5c, 0xec, 0x91, 0x16, 0x3f, 0x00, 0x75, 0x63, 0x31, 0xdc, 0xdf, 0x42, 0x4a, 0x1e,
	0xf9, 0x80, 0xc3, 0xea, 0x98, 0xc7, 0x92, 0x7c, 0x56, 0xc8, 0xb0, 0x67, 0x0c, 0x56, 0x6d, 0x33,
	0x34, 0x3e, 0x2e, 0x93, 0x1e, 0x33, 0x0e, 0x19, 0x86, 0x2e, 0xf9, 0x9e, 0xf7, 0xb3, 0xc5, 0x1f,
	0x5b, 0xca, 0x3f, 0x4d, 0xc1, 0x61, 0xf5, 0x64, 0x91, 0x5c, 0x96, 0x2b, 0x1a, 0x4a, 0x7b, 0xec,
	0x66, 0xc6, 0x7e, 0xb5, 0xa1, 0xae, 0xc7, 0xd5, 0x0e, 0x32, 0xa7, 0xbf, 0x27, 0xa3, 0x98, 0x80,
	0xf5, 0x83, 0xee, 0xfa, 0x4f, 0x76, 0xb4, 0x9c, 0x70, 0xcb, 0xb3, 0x93, 0x85, 0x2f, 0x1f, 0x2b,
	0xfe, 0xd5, 0xf5, 0xf3, 0x75, 0xd7, 0x0f, 0x88, 0x5c, 0xe9, 0x0f, 0x31, 0xf5, 0x06, 0xbf, 0x45,
	0xa7, 0xcf, 0x3b, 0x32, 0x4a, 0x34, 0xa6, 0x9f, 0x27, 0x5c, 0x29, 0xa1, 0x9b, 0x71, 0x78, 0xab,
	0xc4, 0x54, 0x8a, 0x98, 0xb3, 0x9b, 0xca, 0x17, 0x0f, 0x5e, 0x53, 0xff, 0x5c, 0xfc, 0x06, 0x00,
	0x00, 0xff, 0xff, 0xce, 0x67, 0x4e, 0x18, 0xc7, 0x01, 0x00, 0x00,
}
