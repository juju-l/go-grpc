// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/vipex.cc/aliOss/v1/v1.proto/oss.proto

package v1_interface

import v1_proto "gitee.com/vipex/go-grpc/api/vipex.cc/aliOss/v1/v1.proto"

import (
	fmt "fmt"
	_ "gitee.com/vipex/go-grpc/api/vipex.cc/public/v1/v1.proto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OssGrpc service

func NewOssGrpcEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OssGrpc service

type OssGrpcService interface {
	Put(ctx context.Context, in *v1_proto.OssPutReq, opts ...client.CallOption) (*v1_proto.OssPutRst, error)
	Get(ctx context.Context, in *v1_proto.OssGetReq, opts ...client.CallOption) (*v1_proto.OssResult, error)
}

type ossGrpcService struct {
	c    client.Client
	name string
}

func NewOssGrpcService(name string, c client.Client) OssGrpcService {
	return &ossGrpcService{
		c:    c,
		name: name,
	}
}

func (c *ossGrpcService) Put(ctx context.Context, in *v1_proto.OssPutReq, opts ...client.CallOption) (*v1_proto.OssPutRst, error) {
	req := c.c.NewRequest(c.name, "OssGrpc.Put", in)
	out := new(v1_proto.OssPutRst)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ossGrpcService) Get(ctx context.Context, in *v1_proto.OssGetReq, opts ...client.CallOption) (*v1_proto.OssResult, error) {
	req := c.c.NewRequest(c.name, "OssGrpc.Get", in)
	out := new(v1_proto.OssResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OssGrpc service

type OssGrpcHandler interface {
	Put(context.Context, *v1_proto.OssPutReq, *v1_proto.OssPutRst) error
	Get(context.Context, *v1_proto.OssGetReq, *v1_proto.OssResult) error
}

func RegisterOssGrpcHandler(s server.Server, hdlr OssGrpcHandler, opts ...server.HandlerOption) error {
	type ossGrpc interface {
		Put(ctx context.Context, in *v1_proto.OssPutReq, out *v1_proto.OssPutRst) error
		Get(ctx context.Context, in *v1_proto.OssGetReq, out *v1_proto.OssResult) error
	}
	type OssGrpc struct {
		ossGrpc
	}
	h := &ossGrpcHandler{hdlr}
	return s.Handle(s.NewHandler(&OssGrpc{h}, opts...))
}

type ossGrpcHandler struct {
	OssGrpcHandler
}

func (h *ossGrpcHandler) Put(ctx context.Context, in *v1_proto.OssPutReq, out *v1_proto.OssPutRst) error {
	return h.OssGrpcHandler.Put(ctx, in, out)
}

func (h *ossGrpcHandler) Get(ctx context.Context, in *v1_proto.OssGetReq, out *v1_proto.OssResult) error {
	return h.OssGrpcHandler.Get(ctx, in, out)
}
