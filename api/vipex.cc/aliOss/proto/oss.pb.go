// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/vipex.cc/aliOss/proto/oss.proto

package pb // import "codeup.aliyun.com/vipex/go-grpc/api/vipex.cc/aliOss/proto"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "codeup.aliyun.com/vipex/go-grpc/api/vipex.cc/public/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OssResult struct {
	Result               *proto1.Result   `protobuf:"bytes,1,opt,name=result,proto3" json:"result"`
	Data                 bool             `protobuf:"varint,2,opt,name=data,proto3" json:"data"`
	ErrorDes             *proto1.ErrorDes `protobuf:"bytes,3,opt,name=errorDes,proto3" json:"errorDes"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *OssResult) Reset()         { *m = OssResult{} }
func (m *OssResult) String() string { return proto.CompactTextString(m) }
func (*OssResult) ProtoMessage()    {}
func (*OssResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_oss_1560836d6fb4097f, []int{0}
}
func (m *OssResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OssResult.Unmarshal(m, b)
}
func (m *OssResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OssResult.Marshal(b, m, deterministic)
}
func (dst *OssResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OssResult.Merge(dst, src)
}
func (m *OssResult) XXX_Size() int {
	return xxx_messageInfo_OssResult.Size(m)
}
func (m *OssResult) XXX_DiscardUnknown() {
	xxx_messageInfo_OssResult.DiscardUnknown(m)
}

var xxx_messageInfo_OssResult proto.InternalMessageInfo

func (m *OssResult) GetResult() *proto1.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *OssResult) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

func (m *OssResult) GetErrorDes() *proto1.ErrorDes {
	if m != nil {
		return m.ErrorDes
	}
	return nil
}

type Oss struct {
	Test1                string   `protobuf:"bytes,1,opt,name=test1,proto3" json:"test1"`
	Test                 string   `protobuf:"bytes,2,opt,name=test,proto3" json:"test"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Oss) Reset()         { *m = Oss{} }
func (m *Oss) String() string { return proto.CompactTextString(m) }
func (*Oss) ProtoMessage()    {}
func (*Oss) Descriptor() ([]byte, []int) {
	return fileDescriptor_oss_1560836d6fb4097f, []int{1}
}
func (m *Oss) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Oss.Unmarshal(m, b)
}
func (m *Oss) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Oss.Marshal(b, m, deterministic)
}
func (dst *Oss) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Oss.Merge(dst, src)
}
func (m *Oss) XXX_Size() int {
	return xxx_messageInfo_Oss.Size(m)
}
func (m *Oss) XXX_DiscardUnknown() {
	xxx_messageInfo_Oss.DiscardUnknown(m)
}

var xxx_messageInfo_Oss proto.InternalMessageInfo

func (m *Oss) GetTest1() string {
	if m != nil {
		return m.Test1
	}
	return ""
}

func (m *Oss) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

func init() {
	proto.RegisterType((*OssResult)(nil), "pb.OssResult")
	proto.RegisterType((*Oss)(nil), "pb.Oss")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OssGrpcClient is the client API for OssGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OssGrpcClient interface {
	Test(ctx context.Context, in *Oss, opts ...grpc.CallOption) (*OssResult, error)
}

type ossGrpcClient struct {
	cc *grpc.ClientConn
}

func NewOssGrpcClient(cc *grpc.ClientConn) OssGrpcClient {
	return &ossGrpcClient{cc}
}

func (c *ossGrpcClient) Test(ctx context.Context, in *Oss, opts ...grpc.CallOption) (*OssResult, error) {
	out := new(OssResult)
	err := c.cc.Invoke(ctx, "/pb.OssGrpc/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OssGrpcServer is the server API for OssGrpc service.
type OssGrpcServer interface {
	Test(context.Context, *Oss) (*OssResult, error)
}

func RegisterOssGrpcServer(s *grpc.Server, srv OssGrpcServer) {
	s.RegisterService(&_OssGrpc_serviceDesc, srv)
}

func _OssGrpc_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Oss)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssGrpcServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OssGrpc/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssGrpcServer).Test(ctx, req.(*Oss))
	}
	return interceptor(ctx, in, info, handler)
}

var _OssGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OssGrpc",
	HandlerType: (*OssGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _OssGrpc_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/vipex.cc/aliOss/proto/oss.proto",
}

func init() {
	proto.RegisterFile("api/vipex.cc/aliOss/proto/oss.proto", fileDescriptor_oss_1560836d6fb4097f)
}

var fileDescriptor_oss_1560836d6fb4097f = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xbf, 0x4b, 0x03, 0x31,
	0x14, 0xc7, 0xbd, 0xb6, 0xb6, 0xbd, 0xa7, 0x2e, 0xc1, 0xe1, 0xe8, 0x74, 0x9c, 0xcb, 0x89, 0x98,
	0x60, 0x15, 0x17, 0x37, 0x51, 0x1c, 0x03, 0xc1, 0xc9, 0x2d, 0x89, 0xe1, 0x08, 0x5c, 0xc9, 0x23,
	0x2f, 0x15, 0xff, 0x7c, 0xb9, 0xe4, 0x10, 0x1c, 0xdc, 0x3e, 0x79, 0xdf, 0x1f, 0x49, 0x1e, 0x5c,
	0x69, 0xf4, 0xe2, 0xcb, 0xa3, 0xfb, 0xe6, 0xd6, 0x0a, 0x3d, 0x7a, 0x49, 0x24, 0x30, 0x86, 0x14,
	0x44, 0x20, 0xe2, 0x99, 0xd8, 0x02, 0xcd, 0xee, 0xfa, 0x8f, 0x11, 0x8f, 0x66, 0xf4, 0x76, 0x36,
	0x6a, 0xf4, 0xca, 0xd1, 0x71, 0x4c, 0xc5, 0xde, 0x1d, 0xa0, 0x96, 0x44, 0x65, 0xc4, 0x3a, 0x58,
	0xc7, 0x4c, 0x4d, 0xd5, 0x56, 0xfd, 0xd9, 0x1e, 0x38, 0x1a, 0x5e, 0x34, 0x35, 0x2b, 0x8c, 0xc1,
	0xea, 0x53, 0x27, 0xdd, 0x2c, 0xda, 0xaa, 0xdf, 0xaa, 0xcc, 0xac, 0x87, 0xad, 0x8b, 0x31, 0xc4,
	0x17, 0x47, 0xcd, 0x32, 0x27, 0xcf, 0xa7, 0xe4, 0xeb, 0x3c, 0x53, 0xbf, 0x6a, 0x27, 0x60, 0x29,
	0x89, 0xd8, 0x25, 0x9c, 0x26, 0x47, 0xe9, 0x2e, 0xdf, 0x53, 0xab, 0x72, 0x98, 0xaa, 0x27, 0xc8,
	0xd5, 0xb5, 0xca, 0xbc, 0xbf, 0x81, 0x8d, 0x24, 0x7a, 0x8b, 0x68, 0x59, 0x0b, 0xab, 0x77, 0x47,
	0x89, 0x6d, 0xa6, 0x6e, 0x49, 0xb4, 0xbb, 0x98, 0xa1, 0xbc, 0xb0, 0x3b, 0x79, 0x7e, 0xfc, 0x78,
	0x18, 0x7c, 0x72, 0x8e, 0xdb, 0x70, 0x28, 0xff, 0x17, 0x43, 0xb8, 0x1d, 0x22, 0x5a, 0xf1, 0xef,
	0xea, 0x9e, 0xd0, 0x98, 0x75, 0xa6, 0xfb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x78, 0x80,
	0x40, 0x61, 0x01, 0x00, 0x00,
}
